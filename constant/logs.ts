export enum FILE {
  API = 'api.service.ts',
  FISCALIZATION = 'fiscalization.service.ts',
  KAFKA_MIXIN = 'kafka.mixin.ts',
  CRON = 'cron.service.ts',
  SYSTEM = 'system.service.ts',
  RECEIPT = 'receipt.service.ts',
  MAIN = 'main.service.ts',
  ORANGE_DATA = 'orangeData.ts',
  SEND_TO_ORANGE_DATA = 'sendToOrangeData.ts',
  STATUS = 'status.service.ts',
  UPDATE_FISCALIZATION = 'updateFiscalization.ts',
  COMMAND = 'command.service.ts',
  RECEIPT_REGISTRATION = 'receiptRegistration.ts',
}

const generateLogMessage = (file: FILE | null = null, data: any = null, error: any = null) => ({
  file,
  data,
  error,
})

type TLogParam = {
  data?: any
  error?: any
}
export const log = {
  MAIN_CONSUMER: '=MAIN---CONSUMER: ',
  MAIN_CONSUMER2: '=MAIN---CONSUMER2: ',
  RECEIPT_PRODUCER: '=RECEIPT---PRODUCER: ',
  RECEIPT_CONSUMER_CREATE: '=RECEIPT---CONSUMER_CRETE: ',
  RECEIPT_CONSUMER_SEND_ORANGEDATA: '=RECEIPT---CONSUMER_SEND_ORANGEDATA: ',
  RECEIPT_WORK_SEND_ORANGE_DATA: '=RECEIPT---WORK---SEND_ORANGE_DATA: ',
  RECEIPT_WORK_SEND_ORANGE_DATA_EXIT: '=RECEIPT---WORK---SEND_ORANGE_DATA_EXIT: ',
  RECEIPT_WORK_UPDATE_FISCALIZATION: '=RECEIPT---WORK---UPDATE_FISCALIZATION_ ',
  RECEIPT_WORK_UPDATE_FISCALIZATION_EXIT: '=RECEIPT---WORK---UPDATE_FISCALIZATION_EXIT: ',
  RECEIPT_WORK_RECEIPT_REGISTRATION: '=RECEIPT---WORK---RECEIPT_REGISTRATION: ',
  RECEIPT_WORK_RECEIPT_REGISTRATION_EXIT: '=RECEIPT---WORK---RECEIPT_REGISTRATION_EXIT: ',
  FISCALIZATION_PRODUCER: '=FISCALIZATION---PRODUCER: ',
  FISCALIZATION_API: '=FISCALIZATION---API: ',
  FISCALIZATION_CONSUMER: '=FISCALIZATION---CONSUMER: ',
  FISCALIZATION_WORK_UPDATE_FISCALIZATION: '=FISCALIZATION---WORK---UPDATE_FISCALIZATION: ',
  FISCALIZATION_WORK_UPDATE_FISCALIZATION_EXIT:
    '=FISCALIZATION---WORK---UPDATE_FISCALIZATION_EXIT: ',
  WORK_UPDATE_FISCALIZATION_QUERY: '=WORK---UPDATE_FISCALIZATION---QUERY: ',
  WORK_UPDATE_FISCALIZATION: '=WORK---UPDATE_FISCALIZATION: ',
  WORK_SEND_ORANGE_DATA: '=WORK---SEND_ORANGE_DATA: ',
  WORK_RECEIPT_REGISTRATION: '=WORK---RECEIPT_REGISTRATION: ',
  WORK_RECEIPT_REGISTRATION_QUERY: '=WORK---RECEIPT_REGISTRATION---QUERY: ',
  SYSTEM_PRODUCER: '=SYSTEM---PRODUCER: ',
  SYSTEM_REQUEST: '=SYSTEM---REQUEST: ',
  SYSTEM_CONSUMER: '=SYSTEM---CONSUMER: ',
  SEND_RECEIPT: '=SEND_RECEIPT: ',
  WORK_SEND_ORANGE_DATA_STATUS: '=WORK---SEND_ORANGE_DATA---STATUS: ',
  REQUEST_DELIVERY_RECEIPT: '=REQUEST_DELIVERY_RECEIPT: ',
  UPDATE_RECEIPT_STATUS: '=UPDATE_RECEIPT_STATUS: ',
  SUBCRIBE_DELIVERY_MAIN: '=SUBSCRIBER delivery-main queue',
  SUBCRIBE_DELIVERY_MAIN_CLOSED: '=SUBSCRIBER delivery-main queue CLOSED',
  STATUS_CONSUMER: '=STATUS---CONSUMER: ',
  STATUS_PRODUCER: '=STATUS---PRODUCER: ',
  STATUS_REQUEST: '=STATUS---REQUEST: ',
  DELIVERY_SYSTEM_PRODUCER: '=DELIVERY---SYSTEM---PRODUCER: ',
  COMMAND_CONSUMER: '=COMMAND---CONSUMER: ',
  KAFKA_PRODUCER: '=KAFKA---PRODUCER: ',
  KAFKA_CONSUMER: '=KAFKA---CONSUMER: ',
  GET_PULSE_PLANOGRAM: '=GET_PULSE_PLANOGRAM: ',
  SET_RECEIPT_DELIVERED_STATUS: '=SET_RECEIPT_DELIVERED_STATUS: ',
  UPDATE_SERVICE_MENU_STATUS: '=UPDATE_SERVICE_MENU_STATUS: ',
  GET_ACCOUNT_PRIVATE_KEY: '=GET_ACCOUNT_PRIVATE_KEY: ',
  GET_ACCOUNT_DEVICE_GROUP: '=GET_ACCOUNT_DEVICE_GROUP: ',
  OD_VALUES: '=OD_VALUES: ',
  OD_FISCALIZATION_RESPONSE: '=OD_FISCALIZATION_RESPONSE: ',
  ORDER_VALUES: '=ORDER_VALUES: ',
  GET_RECEIPTS: '=GET_RECEIPTS: ',
  RESEND_TO_FISCALIZATION: '=RESEND_TO_FISCALIZATION: ',
  GET_COMMANDS: '=GET_COMMANDS: ',
  GET_AUTOMAT_PRODUCTS: '=GET_AUTOMAT_PRODUCTS: ',
  GET_AUTOMAT_SETTINGS: '=GET_AUTOMAT_SETTINGS: ',

  UPDATE_FISCALIZATION: ({ data, error }: TLogParam) =>
    generateLogMessage(FILE.UPDATE_FISCALIZATION, data, error),
  FISCALIZATION: ({ data, error }: TLogParam) =>
    generateLogMessage(FILE.FISCALIZATION, data, error),
  CRON: ({ data, error }: TLogParam) => generateLogMessage(FILE.CRON, data, error),
  SYSTEM: ({ data, error }: TLogParam) => generateLogMessage(FILE.SYSTEM, data, error),
  ORANGE_DATA: ({ data, error }: TLogParam) => generateLogMessage(FILE.ORANGE_DATA, data, error),
  MAIN: ({ data, error }: TLogParam) => generateLogMessage(FILE.MAIN, data, error),
  RECEIPT: ({ data, error }: TLogParam) => generateLogMessage(FILE.RECEIPT, data, error),
  SEND_TO_ORANGE_DATA: ({ data, error }: TLogParam) =>
    generateLogMessage(FILE.SEND_TO_ORANGE_DATA, data, error),
  STATUS: ({ data, error }: TLogParam) => generateLogMessage(FILE.STATUS, data, error),
  COMMAND: ({ data, error }: TLogParam) => generateLogMessage(FILE.COMMAND, data, error),
  KAFKA: ({ data, error }: TLogParam) => generateLogMessage(FILE.KAFKA_MIXIN, data, error),
  RECEIPT_REGISTRATION: ({ data, error }: TLogParam) =>
    generateLogMessage(FILE.RECEIPT_REGISTRATION, data, error),
}
